/ {
  #define SYMBOL(NAME, SYMBOLS) \
    NAME: NAME { \
      compatible = "zmk,behavior-macro"; \
      label = ZMK_MACRO_STRINGIFY(NAME); \
      #binding-cells = <0>; \
      wait-ms = <0>; \
      tap-ms = <0>; \
      bindings = <&macro_tap SYMBOLS>; \
    };

  #define SHIFTED_SYMBOL(NAME, UNSHIFTED, SHIFTED) \
    NAME: NAME { \
      compatible = "zmk,behavior-mod-morph"; \
      label = ZMK_MACRO_STRINGIFY(NAME); \
      #binding-cells = <0>; \
      bindings = <UNSHIFTED>, <SHIFTED>; \
      mods = <(MOD_LSFT|MOD_RSFT)>; \
    };
  #define SHIFTED_SYMBOL_WITH_KEEP(NAME, UNSHIFTED, SHIFTED, MODS, KEEP_MODS) \
    NAME: NAME { \
      compatible = "zmk,behavior-mod-morph"; \
      label = ZMK_MACRO_STRINGIFY(NAME); \
      #binding-cells = <0>; \
      bindings = <UNSHIFTED>, <SHIFTED>; \
      mods = <MODS>; \
      keep-mods = <KEEP_MODS>; \
    };

  #define TAPHOLD_SYMBOL(NAME, TAP, HOLD) \
     NAME: NAME { \
      compatible = "zmk,behavior-hold-tap"; \
      label = ZMK_MACRO_STRINGIFY(NAME); \
      #binding-cells = <2>; \
      tapping-term-ms = <TAPPING_TERM>; \
      flavor = "tap-preferred"; \
      quick-tap-ms = <QUICK_TAP_TERM>; \
      global-quick-tap; \
      bindings = <HOLD>, <TAP>; \
    };

  #define MODTAP_SYMBOL(NAME, BINDINGS, HOLD_TRIGGER_KEYS) \
     NAME: NAME { \
      compatible = "zmk,behavior-hold-tap"; \
      label = "HOMEROW_MOD"; \
      #binding-cells = <2>; \
      flavor = "balanced"; \
      tapping-term-ms = <180>; \
      quick-tap-ms = <175>; \
      global-quick-tap-ms = <150>; \
      hold-trigger-on-release; \
      bindings = <&sk>, <BINDINGS>; \
      hold-trigger-key-positions = <HOLD_TRIGGER_KEYS>; \
    };
  #define HRML_MT(k1,k2,k3,k4) &k1 LGUI   0  &k2 LALT  0  &k3 LCTRL 0  &k4 LSHIFT 0
  #define HRMR_MT(k1,k2,k3,k4) &k1 RSHIFT 0  &k2 RCTRL 0  &k3 RALT  0  &k4 RGUI   0

  #define LAYERTAP_SYMBOL(NAME, BINDINGS) \
     NAME: NAME { \
      compatible = "zmk,behavior-hold-tap"; \
      label = ZMK_MACRO_STRINGIFY(NAME); \
      #binding-cells = <2>; \
      tapping-term-ms = <0>; \
      flavor = "hold-preferred"; \
      retro-tap; \
      bindings = <&mo>, <BINDINGS>; \
    };

  #define MACRO_SYMBOL(NAME, SYMBOLS) \
    NAME: NAME { \
      compatible = "zmk,behavior-macro"; \
      label = ZMK_MACRO_STRINGIFY(NAME); \
      #binding-cells = <0>; \
      wait-ms = <10>; \
      tap-ms = <10>; \
      bindings = <&macro_tap SYMBOLS>; \
    };

  #define TAPDANCE_SYMBOL(NAME, TAPHOLD, DTAP, TTAP) \
     NAME: NAME { \
      compatible = "zmk,behavior-tap-dance"; \
      label = ZMK_MACRO_STRINGIFY(NAME); \
      #binding-cells = <0>; \
      tapping-term-ms = <TD_TAPPING_TERM>; \
      bindings = <TAPHOLD>, <DTAP>, <TTAP>; \
    };

  symbols {

    SHIFTED_SYMBOL(sh_comma,   &kp COMMA, &kp SEMICOLON)
    SHIFTED_SYMBOL(sh_dot,     &kp DOT, &kp COLON)
    SHIFTED_SYMBOL(sh_slash,   &kp SLASH, &kp BSLH)
    SHIFTED_SYMBOL(sh_shift,   &skq LSHIFT, &caps_word)
    // skq_shift: skq_shift {
    //   compatible = "zmk,behavior-sticky-key";
    //   label = "skq_shift";
    //   #binding-cells = <1>;
    //   bindings = <&sh_shift>;
    //   release-after-ms = <1000>;
    //   quick-release; // no double capitalization when rolling keys
    // };
    // nkq_shift: nkq_shift {
    //   compatible = "zmk,behavior-hold-tap";
    //   label = "nkq_shift";
    //   #binding-cells = <2>;
    //   tapping-term-ms = <180>;
    //   flavor = "tap-preferred";
    //   bindings = <&sh_shift>, <&skq_shift>;
    // };

    // tap: backspace | lshft + tap: delete | rshft + tap: shift-delete
    SHIFTED_SYMBOL_WITH_KEEP(sh_bspc, &kp BACKSPACE, &kp DELETE, (MOD_LSFT|MOD_RSFT), MOD_RSFT)

    // SHIFTED_SYMBOL(sh_n1,      &kp N1, &kp KP_N1)
    // SHIFTED_SYMBOL(sh_n2,      &kp N2, &kp KP_N2)
    // SHIFTED_SYMBOL(sh_n3,      &kp N3, &kp KP_N3)
    // SHIFTED_SYMBOL(sh_n4,      &kp N4, &kp KP_N4)
    // SHIFTED_SYMBOL(sh_n5,      &kp N5, &kp KP_N5)
    // SHIFTED_SYMBOL(sh_n6,      &kp N6, &kp KP_N6)
    // SHIFTED_SYMBOL(sh_n7,      &kp N7, &kp KP_N7)
    // SHIFTED_SYMBOL(sh_n8,      &kp N8, &kp KP_N8)
    // SHIFTED_SYMBOL(sh_n9,      &kp N9, &kp KP_N9)
    // SHIFTED_SYMBOL(sh_n0,      &kp N0, &kp KP_N0)

    // MODTAP_SYMBOL(mt_n1,       &sh_n1, KEYS_R THUMBS)
    // MODTAP_SYMBOL(mt_n2,       &sh_n2, KEYS_R THUMBS)
    // MODTAP_SYMBOL(mt_n3,       &sh_n3, KEYS_R THUMBS)
    // MODTAP_SYMBOL(mt_n4,       &sh_n4, KEYS_R THUMBS)

    // MODTAP_SYMBOL(mt_n7,       &sh_n7, KEYS_L THUMBS)
    // MODTAP_SYMBOL(mt_n8,       &sh_n8, KEYS_L THUMBS)
    // MODTAP_SYMBOL(mt_n9,       &sh_n9, KEYS_L THUMBS)
    // MODTAP_SYMBOL(mt_n0,       &sh_n0, KEYS_L THUMBS)

    SYMBOL(mc_excl,            &kp EXCL)
    SYMBOL(mc_at,              &kp AT)
    SYMBOL(mc_hash,            &kp HASH)
    SYMBOL(mc_dllr,            &kp DLLR)
    SYMBOL(mc_prcnt,           &kp PRCNT)
    SYMBOL(mc_caret,           &kp CARET)
    SYMBOL(mc_amps,            &kp AMPS)
    SYMBOL(mc_star,            &kp STAR)
    SYMBOL(mc_qmark,           &kp QMARK)

    SYMBOL(mc_grave,           &kp GRAVE)
    SYMBOL(mc_dqt,             &kp DQT)
    SYMBOL(mc_minus,           &kp MINUS)
    SYMBOL(mc_plus,            &kp PLUS)
    SYMBOL(mc_tilde,           &kp TILDE)
    SYMBOL(mc_pipe,            &kp PIPE)
    SYMBOL(mc_equal,           &kp EQUAL)
    SYMBOL(mc_lt,              &kp LT)
    SYMBOL(mc_gt,              &kp GT)
    // SYMBOL(mc_bslh,            &kp BSLH)
    SYMBOL(mc_under,           &kp UNDER)


    LAYERTAP_SYMBOL(lt_bspc,   &sh_bspc) // TODO: &to layer on hold? (eg. &mo NAV on hold, BSPC on tap, &to NAV on tap-hold). Remember to set quick-tap-ms to 0, so that tap-hold does not simply repeats tap.
    
    SYMBOL(mc_r,            &kp R)
    LAYERTAP_SYMBOL(lt_r,   &mc_r)
  };
};