/* MINI WIKI //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  // KEYS
    &kp  [key_press <key>]         on press/release
    &kt  [key_toggle <key>]        toggle key pressed or released
    &sk  [sticky <key>]            keep key pressed until another one is pressed+released (one-shot)
    - release-after-ms               release sticky automatically (default=1s)
    - quick-release                  release sticky when another key is pressed
    - ignore-modifiers               enabled by default, sticky modifiers are merged instead of overridden

  // LAYERS //
    &to  [to_layer <layer>]        go to layer and disables all other layers except the default layer
    &tog [toggle_layer <layer>]    go to layer until it is manually disabled
    &mo  [momentary_layer <layer>] go to layer while key is pressed
    &lt  [layer_tap <layer> <key>] go to layer while key is held, or key if is tapped
    &sl  [sticky_layer <layer>]    go to layer for just one key press (one-shot)
                                    --> `quick-release` by default
                                    --> Double key problem: it does not return to first layer if it is still held down after a key press
                                    --> Solution: proc via a MACRO, since holding a macro only sends a tap
                                          alpha2macro: behavior_macro_1 {
                                            compatible = "zmk,behavior-macro";
                                            label = "MACRO1";
                                            #binding-cells = <0>;
                                            bindings = < &sl AL2 >;
                                          };

  // HOLD-TAP //
    - tapping-term-ms              time to hold before triggering hold behaviour
    - quick-tap-ms                 timer between quick-tap + hold to force hold on tap behaviour (The opposite of TAPPING_FORCE_HOLD in QMK)
    -  - global-quick-tap          applies quick-tap-ms even if quick-tap is not the same key, useful for avoiding delays when fast typing on homerow mods
    - retro-tap                    hold behaviour is applied immediately if pressing another key when pressing the first one?
    - hold-trigger-key-positions   keys in this list instantly apply the hold modifier if they are the first ones pressed after the key with hold-tap behaviour
    - flavor
      "hold-preferred"   &ht_hp   interrupt-based: trigger hold when tapping-term-ms has expired OR another key is pressed down
      "balanced"         &ht_bl   interrupt-based: trigger hold when tapping-term-ms has expired OR another key is pressed AND released (AKA permissive, prone to many false positives)
      "tap-unless-interrupted"    interrupt-based: trigger hold ONLY when another key is pressed before tapping-term-ms has expired
      "tap-preferred"    &ht_tp   trigger hold ONLY when tapping-term-ms has expired

    &mt  "mod-tap" is simply a hold-tap with flavor="hold-preferred" and tapping-term-ms=<200>, it can be used on any key, not just modifiers

  // MOD-MORPH // can customize mod behaviour for any key (eg. Ctrl+q=ESC)
    bspc_del: backspace_delete {
      compatible = "zmk,behavior-mod-morph";
      label = "BACKSPACE_DELETE";
      #binding-cells = <0>;                        <-- number of input arguments
      bindings = <&kp BACKSPACE>, <&kp DELETE>;    <-- <1> is original key, <2> is result
      mods = <(MOD_LSFT|MOD_RSFT)>;                <-- list of mods triggering the behaviour
      keep-mods = <(MOD_RSFT)>;                    <-- list of mods applied to the result
    };

  // OTHER //
    MACRO          sequence of behaviours
    TAP-DANCE      different outputs by number of times a key is pressed, can be combined with HOLD-TAP
    &caps_word     enable caps for a single word, can be customized
    &key_repeat    repeat last key
    &reset         only affects the half on which the command is invoked (slave still needs to be connected to master though)
    &bootloader    only affects the half on which the command is invoked (slave still needs to be connected to master though)

*/

/ {
  behaviors { // https://github.com/zmkfirmware/zmk/tree/main/app/dts/behaviors
  
    conditional_layers {
      compatible = "zmk,conditional-layers";
      tri_layer {
        if-layers = <NAV SYM_NUM>;
        then-layer = <FUNCT>;
      };
    };

    // Urob // "timer-less" homerow mods //////////////////////////////////
    hml: homerow_mods_l {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MOD_L";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <180>;
      quick-tap-ms = <175>; // repeat on tap-into-hold
      global-quick-tap-ms = <150>;  // requires PR #1387
      hold-trigger-on-release;  // requires PR #1423
      bindings = <&sk>, <&kp>;
      hold-trigger-key-positions = <KEYS_R THUMBS>;
    };
    hmr: homerow_mods_r {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MOD_R";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <180>;
      quick-tap-ms = <175>; // repeat on tap-into-hold
      global-quick-tap-ms = <150>;  // requires PR #1387
      hold-trigger-on-release;  // requires PR #1423
      bindings = <&sk>, <&kp>;
      hold-trigger-key-positions = <KEYS_L THUMBS>;
    };
    #define HRML(k1,k2,k3,k4) &hml LGUI k1 &hml LALT k2 &hml LCTRL k3 &hml LSHIFT k4
    #define HRMR(k1,k2,k3,k4) &hmr RSHIFT k1 &hmr RCTRL k2 &hmr RALT k3 &hmr RGUI k4

    // Useful for modifier-clicking without the modifier remaining active
    nk: not_so_sticky_key { // Callum mods // // Sticky key on tap, normal key on hold
      compatible = "zmk,behavior-hold-tap";
      label = "NOT_SO_STICKY_KEY";
      #binding-cells = <2>;
      tapping-term-ms = <180>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&sk>;
    };
    #define NK(key) &nk key key


    // Layer-switching ////////////////////////////////////////////////////
    
    // retro_mo: retro_mo_with_tap { // Callum // A hold-tap that activates without delay (like `&mo`)
    //   compatible = "zmk,behavior-hold-tap";
    //   label = "RETRO_MO_WITH_TAP";
    //   #binding-cells = <2>;
    //   tapping-term-ms = <0>;
    //   retro-tap;
    //   flavor = "hold-preferred";
    //   bindings = <&mo>, <&kp>;
    // };

    mo_sl: layer_tap_with_stick_layer { // Rafael Rom√£o // hold for &mo, tap for &sl
      compatible = "zmk,behavior-hold-tap";
      label = "LAYER_TAP_WITH_STICK_LAYER";
      #binding-cells = <2>;
      tapping-term-ms = <180>;
      flavor = "tap-preferred";
      quick-tap-ms = <200>;
      bindings = <&mo>, <&sl>; // REVIEW: may need to proc &sl via a MACRO to avoid double-tap problems
    };
    #define MO_SL(key) &mo_sl key key

    mo_bal: mo_kp_bal { // DEFAULT in symbols.dtsi
      compatible = "zmk,behavior-hold-tap";
      label = "mo_bal";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <175>;
      flavor = "balanced";
      bindings = <&mo>, <&kp>;
    }; 


    // OTHER //////////////////////////////////////////////////////////////

    caps_dance: caps_dance {
      compatible = "zmk,behavior-tap-dance";
      label = "CAPS_DANCE";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp CAPS>, <&caps_word>;
    };

    skq: sticky_key_quick_release { // Callum // needed for sticky SHIFT
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <1000>;
      quick-release; // no double capitalization when rolling keys
    };


    // OLD ////////////////////////////////////////////////////////////////

    // tap for key, tap-hold to change layer, can be useful if needing extra layer buttons (eg, tap-hold Q to go to BASE layer)
    // td_layer: tap_dance_layer { 
    //   compatible = "zmk,behavior-hold-tap";
    //   label = "TAPDANCE_LAYERS";
    //   #binding-cells = <2>;
    //   tapping-term-ms = <150>;
    //   quick-tap-ms = <0>;
    //   flavor = "tap-preferred";
    //   bindings = <&to>, <&kp>;
    // };

    // // timer-less hold mod with tap activation if no other key is pressed
    // retro_sticky: sticky_with_retro {
    //   compatible = "zmk,behavior-hold-tap";
    //   label = "RETRO_STICKY";
    //   #binding-cells = <2>;
    //   tapping_term_ms = <0>;
    //   retro-tap;
    //   flavor = "hold-preferred";
    //   bindings = <&kp>, <&kp>;
    // };


    // Ben Vallak //
    // hm: homerow_mods {
    //   compatible = "zmk,behavior-hold-tap";
    //   label = "HOMEROW_MODS";
    //   #binding-cells = <2>;
    //   tapping-term-ms = <180>;
    //   quick-tap-ms = <0>;
    //   flavor = "tap-preferred";
    //   bindings = <&kp>, <&kp>;
    // };
    // td: tapdance {
    //   compatible = "zmk,behavior-hold-tap";
    //   label = "TAPDANCE";
    //   #binding-cells = <2>;
    //   tapping-term-ms = <150>;
    //   quick-tap-ms = <0>;
    //   flavor = "tap-preferred";
    //   bindings = <&kp>, <&kp>;
    // };
    // alpha2macro: behavior_macro_1 {
		//   compatible = "zmk,behavior-macro";
    //   label = "MACRO1";
		//   #binding-cells = <0>;
		//   bindings = < &sl CALLUM_BASE >;
	  // };
  };
};
