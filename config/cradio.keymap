/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

// Keys
#define BACK LG(LBKT) 
#define PREV_TAB LC(LS(TAB)) 
#define NEXT_TAB RC(TAB)
#define FWRD LG(RBKT)

// Layers
#define BASE 0
#define SYM 1
#define NUM 2
#define NAV 3
#define BLT 4
#define GAME 5

// Home row mods
#define HRML(k1,k2) &hm LALT k1 &hm LGUI k2
#define HRMR(k1,k2) &hm RGUI k1 &hm RALT k2
// #define HRML(k1,k2,k3,k4) &ht LSHFT k1 &ht LALT k2 &ht LCTRL k3 &ht LGUI k4
// #define HRMR(k1,k2,k3,k4) &ht RGUI k1 &ht RCTRL k2 &ht RALT k3 &ht RSHFT k4

&mt {
  flavor = "tap-preferred";
  tapping_term_ms = <200>;
};

&mmv {
  time-to-max-speed-ms = <680>;
  acceleration-exponent=<2>;
};

/ { 
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick_tap_ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
    td: tapdance {
      compatible = "zmk,behavior-hold-tap";
      label = "TAPDANCE";
      #binding-cells = <2>;
      tapping-term-ms = <150>;
      quick_tap_ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
  };

  keymap {
    compatible = "zmk,keymap";
                
    default_layer {
    bindings = <
      &kp Q /**/ &kp W /**/ &kp F /**/ &kp P /**/ &kp B 						                                &kp J /**/ &kp L /**/ &kp U /**/ &kp Y /**/ &kp BSPC 
      &kp A /**/ &kp R /**/ HRML(S, T) /**/ &kp G 			                                            &kp M /**/ HRMR(N, E) /**/ &kp I /**/ &kp O
      &kp Z /**/ &kp X /**/ &kp C /**/ &kp D /**/ &kp V				                                      &kp K /**/ &kp H /**/ &td UNDER SLASH /**/ &td EXCL DOT /**/ &td MINUS COMMA
      &mt LC(LS(LALT)) SPACE /**/ &sk LSHIFT                                                        &sk RCTRL /**/ &to SYM
      >;
    };

    sym_layer {
    bindings = <
      &kp ESC /**/ &kp AT /**/ &td LC(LG(LS(N4))) HASH /**/ &kp DLLR /**/ &kp PRCNT		              &kp CARET /**/ &kp LESS_THAN /**/ &kp GREATER_THAN /**/ &kp SEMI /**/ &kp BSPC 
      &kp TAB /**/ &kp EQUAL /**/ &kp LA(RBKT) /**/ &kp LA(LS(RBKT)) /**/ &kp SQT 		              &kp BSLH /**/ &kp LBRC /**/ &kp RBRC /**/ &kp PIPE /**/ &kp ENTER
      &kp TILDE /**/ &kp LA(N3) /**/ &kp LA(LBKT) /**/ &kp LA(LS(LBKT)) /**/ &kp DQT 	              &kp LBKT /**/ &kp LPAR /**/ &kp RPAR /**/ &kp RBKT /**/ &to NAV 
      &to BASE /**/ &sk LSHIFT                                                                      &sk RALT /**/ &to NUM 
      >;
    };
		
    num_layer {
    bindings = <
      &kp ESC /**/ &kp C_PP /**/ &kp C_PREV /**/ &kp C_NEXT /**/ &kp UNDER   			                  &kp MINUS /**/ &kp N7 /**/ &kp N8 /**/ &kp N9 /**/ &kp BSPC
      &kp TAB /**/ &none /**/ &kp C_VOL_DN /**/ &kp C_VOL_UP /**/ &kp PLUS 			                    &kp EQUAL /**/ &kp N4 /**/ &kp N5 /**/ &kp N6 /**/ &kp ENTER
      &to BLT /**/ &kp AMPS /**/ &kp SLASH /**/ &kp STAR /**/ &kp DOT			                          &kp N0 /**/ &kp N1 /**/ &kp N2 /**/ &kp N3 /**/ &to NAV 
      &to BASE /**/ &sk LGUI                                                                        &sk RALT /**/ &to NUM 
      >;
		};
		
    nav_layer {
    bindings = <
      &kp ESC /**/ &mwh SCROLL_LEFT /**/ &mmv MOVE_UP /**/ &mwh SCROLL_RIGHT /**/ &kp N5 			      &kp BACK /**/ &kp PREV_TAB /**/ &kp NEXT_TAB /**/ &kp FWRD /**/ &kp BSPC
      &kp TAB /**/ &mmv MOVE_LEFT /**/ &mmv MOVE_DOWN /**/ &mmv MOVE_RIGHT /**/ &kp DEL             &kp LEFT /**/ &kp DOWN /**/ &kp UP /**/ &kp RIGHT /**/ &kp ENTER 
      &td LG(GRAVE) GRAVE /**/ &mkp RCLK /**/ &mwh SCROLL_UP /**/ &mwh SCROLL_DOWN /**/ &none       &mkp LCLK /**/ &kp PG_DN /**/ &kp PG_UP /**/ &to GAME /**/ &to NAV
      &to BASE /**/ &sk LGUI                                                                        &sk RALT /**/ &to SYM 
      >;
    };	

    blt_layer {
    bindings = <
      &none /**/ &none /**/ &none /**/ &none /**/ &none                                             &none /**/ &none /**/ &none /**/ &none /**/ &none 
      &none /**/ &none /**/ &none /**/ &none /**/ &none                                             &none /**/ &none /**/ &none /**/ &none /**/ &none 
      &bt BT_PRV /**/ &bt BT_NXT /**/ &bt BT_CLR /**/ &none /**/ &none                              &none /**/ &none /**/ &none /**/ &none /**/ &none
      &to BASE /**/ &none                                                                           &none /**/ &to SYM 
      >;
    };	

    gaming_layer {
    bindings = <
      &td TAB ESC /**/ &kp Q /**/ &kp W /**/ &kp E /**/ &kp R                                       &none /**/ &none /**/ &none /**/ &none /**/ &none 
      &kp LSHIFT /**/ &kp A /**/ &kp S /**/ &kp D /**/ &kp F                                        &none /**/ &none /**/ &none /**/ &none /**/ &none 
      &kp LCTRL /**/ &kp Z /**/ &kp X /**/ &kp C /**/ &kp V                                         &none /**/ &none /**/ &none /**/ &none /**/ &none
      &kp LALT /**/ &kp SPACE                                                                       &to BASE /**/ &none
      >;
    };	
	};
};