/* TODO
- LAYER SWITCHING IDEAS:
    - HOLD alpha keys (slower, but more keys available)
    - press COMBOs of alphas (much faster, but have to avoid common sequences)
- Mod-tap with no delay and retro-tap vs &lt? --> could not use &lt since is laggier
- try homerow mods with opposite hands on main layer (or even all layers): viable with bottom row mods
- put as much functionality on left hand so that I can use mouse without much switching
- find GOOD backspace position. Find fast way to delete one word
- do I really need dedicated right homerow mods for nav layer?
- assign something to right thumb layer tap
- move function layer to double thumb combo since I use it rarely? I prefer easier switching between nav and sym_num layers.
- find a way to optionally make permanent layers
- faster game layer access
- find a use for double thumb combos (30 31), (32 33), (30 33), (31 32), (30 32), (31 33)
- move GUI to lower pinkies?
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
// #include <dt-bindings/zmk/mouse.h>

// Keys
// #define BACK LG(LBKT)
// #define PREV_TAB LC(LS(TAB))
// #define NEXT_TAB RC(TAB)
// #define FWRD LG(RBKT)

// Behaviours
#define XXX &none
#define ___ &trans

// Layers
#define BASE 0
#define QWERTY 1
#define NAV 2
#define SYM_NUM 3
#define FUNCT 4
#define BLT 5
#define GAME 6
#define NO_GAME BASE QWERTY NAV SYM_NUM FUNCT BLT
#define ALL 0xff

// Home row mods
#define HRML(k1,k2,k3,k4) &hml LGUI k1 &hml LALT k2 &hml LCTRL k3 &hml LSHIFT k4
#define HRMR(k1,k2,k3,k4) &hmr RSHIFT k1 &hmr RCTRL k2 &hmr RALT k3 &hmr RGUI k4

#define NK(key) &nk key key

// &mmv {
//   time-to-max-speed-ms = <680>;
//   acceleration-exponent=<2>;
// };

#define COMBO_20_MS 20
#define COMBO_30_MS 30
#define COMBO_70_MS 70

#define COMBO_STICKY(NAME, BINDINGS, KEYPOS, LAYERS, TIMEOUT) \
  combo_##NAME { \
    timeout-ms = <TIMEOUT>; \
    key-positions = <KEYPOS>; \
    bindings = <BINDINGS>; \
    layers = <LAYERS>; \
    slow-release; \
    global-quick-tap-ms = <75>; \
  };
#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TIMEOUT) \
  combo_##NAME { \
    timeout-ms = <TIMEOUT>; \
    key-positions = <KEYPOS>; \
    bindings = <BINDINGS>; \
    layers = <LAYERS>; \
    global-quick-tap-ms = <75>; \
  };

  /*                KEY POSITIONS
  ╭────────────────────╮ ╭────────────────────╮
  │  0   1   2   3   4 │ │  5   6   7   8   9 │
  │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
  │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
  ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
              ╰────────╯ ╰────────╯            */
#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define THUMBS 30 31 32 33

/ {
  combos {
    compatible = "zmk,combos";

    // other
    COMBO_STICKY(compose_key,        &kp K_CMENU,            14 30,          NO_GAME, COMBO_30_MS)

    // free left // NOTE: can combine combos with hold behaviour
    // COMBO_STICKY(compose_key,        &kp K_CMENU,            11 2,           NO_GAME, COMBO_20_MS)
    // COMBO_STICKY(compose_key,        &kp K_CMENU,            13 2,           NO_GAME, COMBO_20_MS)
    // COMBO_STICKY(compose_key,        &kp K_CMENU,            21 12,          NO_GAME, COMBO_20_MS)
    // COMBO_STICKY(compose_key,        &kp K_CMENU,            23 12,          NO_GAME, COMBO_20_MS)
    // COMBO_STICKY(compose_key,        &kp K_CMENU,            1 2 3,          NO_GAME, COMBO_20_MS)
    // COMBO_STICKY(compose_key,        &kp K_CMENU,            11 12 13,       NO_GAME, COMBO_20_MS)
    // COMBO_STICKY(compose_key,        &kp K_CMENU,            21 22 23,       NO_GAME, COMBO_20_MS)

    // left homerow combo mods
    COMBO_STICKY(gui,                NK(LGUI),               10 30,          NO_GAME, COMBO_30_MS)
    COMBO_STICKY(alt,                NK(LALT),               11 30,          NO_GAME, COMBO_30_MS)
    COMBO_STICKY(ctrl,               NK(LCTRL),              12 30,          NO_GAME, COMBO_30_MS)
    COMBO_STICKY(shift,              NK(LSHIFT),             13 30,          NO_GAME, COMBO_30_MS)
    COMBO_STICKY(gui_alt,            NK(LG(LALT)),           10 11 30,       NO_GAME, COMBO_30_MS)
    COMBO_STICKY(gui_ctrl,           NK(LG(LCTRL)),          10 12 30,       NO_GAME, COMBO_30_MS)
    COMBO_STICKY(gui_shift,          NK(LG(LSHIFT)),         10 13 30,       NO_GAME, COMBO_30_MS)
    COMBO_STICKY(alt_ctrl,           NK(LA(LCTRL)),          11 12 30,       NO_GAME, COMBO_30_MS)
    COMBO_STICKY(alt_shift,          NK(LA(LSHIFT)),         11 13 30,       NO_GAME, COMBO_30_MS)
    COMBO_STICKY(ctrl_shift,         NK(LC(LSHIFT)),         12 13 30,       NO_GAME, COMBO_30_MS)
    COMBO_STICKY(gui_alt_ctrl,       NK(LG(LA(LCTRL))),      10 11 12 30,    NO_GAME, COMBO_30_MS)
    COMBO_STICKY(gui_alt_shift,      NK(LG(LA(LSHIFT))),     10 11 13 30,    NO_GAME, COMBO_30_MS)
    COMBO_STICKY(gui_ctrl_shift,     NK(LG(LC(LSHIFT))),     10 12 13 30,    NO_GAME, COMBO_30_MS)
    COMBO_STICKY(alt_ctrl_shift,     NK(LA(LC(LSHIFT))),     11 12 13 30,    NO_GAME, COMBO_30_MS)
    COMBO_STICKY(gui_alt_ctrl_shift, NK(LG(LA(LC(LSHIFT)))), 10 11 12 13 30, NO_GAME, COMBO_30_MS)

    // utility left hand
    COMBO(repeat,&key_repeat,   1 2,     NO_GAME, COMBO_20_MS)
    COMBO(tab,   &kp TAB,       2 3,     NO_GAME, COMBO_20_MS)

    COMBO(esc,   &kp ESC,       11 12,   ALL, COMBO_20_MS)
    COMBO(ret,   &kp RETURN,    12 13,   ALL, COMBO_20_MS)

    COMBO(cut,   &kp LC(X),     21 23,   NO_GAME, COMBO_30_MS)
    COMBO(copy,  &kp LC(INS),   21 22,   NO_GAME, COMBO_20_MS)
    COMBO(paste, &kp LS(INS),   22 23,   NO_GAME, COMBO_20_MS)

    // brackets right hand
    COMBO(lbrc,  &kp LBRC,      6 7,     NO_GAME, COMBO_20_MS)
    COMBO(rbrc,  &kp RBRC,      7 8,     NO_GAME, COMBO_20_MS)
    COMBO(lpar,  &kp LPAR,      16 17,   NO_GAME, COMBO_20_MS)
    COMBO(rpar,  &kp RPAR,      17 18,   NO_GAME, COMBO_20_MS)
    COMBO(lbrk,  &kp LBKT,      26 27,   NO_GAME, COMBO_20_MS)
    COMBO(rbrk,  &kp RBKT,      27 28,   NO_GAME, COMBO_20_MS)


  //   combo_game {
  //     timeout-ms = <30>;
  //     key-positions = <2 3 4 5>;
  //     bindings = <&to GM>;
  //   };
  //   combo_sys {
  //     timeout-ms = <30>;
  //     key-positions = <4 5 6>;
  //     bindings = <&to SYS>;
  //   };
  //   combo_caps {
  //     timeout-ms = <30>;
  //     key-positions = <12 13 14>;
  //     bindings = <&caps_word>;
  //   };
  //   lalt {
  //     timeout-ms = <20>;
  //     key-positions = <10 11>;
  //     bindings = <&kp LALT>;
  //     layers = <SYS>;
  //   };
  };

  behaviors { // https://github.com/zmkfirmware/zmk/tree/main/app/dts/behaviors

    // Mine
    td_layer: tap_dance_layer { // tap for key, tap-hold to change layer
      compatible = "zmk,behavior-hold-tap";
      label = "TAPDANCE_LAYERS";
      #binding-cells = <2>;
      tapping-term-ms = <150>;
      quick-tap-ms = <0>;
      flavor = "tap-preferred";
      bindings = <&to>, <&kp>;
    };

    caps_morph: caps_to_caps_word {
      compatible = "zmk,behavior-mod-morph";
      label = "CAPS_TO_CAPS_WORD";
      #binding-cells = <0>;
      bindings = <&kp CAPS>, <&caps_word>;
      mods = <(MOD_LCTL)>;
    };

    retro_sticky: sticky_with_retro { // timer-less hold mod with tap activation if no other key is pressed
      compatible = "zmk,behavior-hold-tap";
      label = "RETRO_STICKY";
      #binding-cells = <2>;
      tapping_term_ms = <0>;
      retro-tap;
      flavor = "hold-preferred";
      bindings = <&kp>, <&kp>;
    };

    // Urob // "timer-less" homerow mods
    hml: homerow_mods_l {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MOD_L";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <280>;
      quick-tap-ms = <175>; // repeat on tap-into-hold
      global-quick-tap-ms = <150>;  // requires PR #1387
      hold-trigger-on-release;  // requires PR #1423
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <KEYS_R THUMBS>;
    };
    hmr: homerow_mods_r {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MOD_R";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <280>;
      quick-tap-ms = <175>; // repeat on tap-into-hold
      global-quick-tap-ms = <150>;  // requires PR #1387
      hold-trigger-on-release;  // requires PR #1423
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <KEYS_L THUMBS>;
    };

    // Ben Vallak
    // hm: homerow_mods {
    //   compatible = "zmk,behavior-hold-tap";
    //   label = "HOMEROW_MODS";
    //   #binding-cells = <2>;
    //   tapping-term-ms = <180>;
    //   quick-tap-ms = <0>;
    //   flavor = "tap-preferred";
    //   bindings = <&kp>, <&kp>;
    // };
    // td: tapdance {
    //   compatible = "zmk,behavior-hold-tap";
    //   label = "TAPDANCE";
    //   #binding-cells = <2>;
    //   tapping-term-ms = <150>;
    //   quick-tap-ms = <0>;
    //   flavor = "tap-preferred";
    //   bindings = <&kp>, <&kp>;
    // };

    // Callum
    skq: sticky_key_quick_release { // needed for sticky SHIFT
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <1000>;
      quick-release; // no double capitalization when rolling keys
    };

    // Sticky key on tap, normal key on hold
    // Useful for modifier-clicking without the modifier remaining active
    nk: not_so_sticky_key { // used by homerow mods in Callum
      compatible = "zmk,behavior-hold-tap";
      label = "NOT_SO_STICKY_KEY";
      #binding-cells = <2>;
      tapping_term_ms = <180>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&sk>;
    };

    // A hold-tap that activates without delay (like `&mo`)
    retro_mo: retro_mo_with_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "RETRO_MO_WITH_TAP";
      #binding-cells = <2>;
      tapping_term_ms = <0>;
      retro-tap;
      flavor = "hold-preferred";
      bindings = <&mo>, <&kp>;
    };

    // alpha2macro: behavior_macro_1 {
		//   compatible = "zmk,behavior-macro";
    //   label = "MACRO1";
		//   #binding-cells = <0>;
		//   bindings = < &sl CALLUM_BASE >;
	  // };

    conditional_layers {
      compatible = "zmk,conditional-layers";
      tri_layer {
        if-layers = <NAV SYM_NUM>;
        then-layer = <FUNCT>;
      };
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base_layer {
      bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &kp Q         &kp W         &kp F         &kp P         &kp B             &kp J         &kp L         &kp U         &kp Y         &kp SQT
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             HRML(A,       R,            S,            T)            &kp G             &kp M         HRMR(N,       E,            I,            O)
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             &kp Z         &kp X         &kp C         &kp D         &kp V             &kp K         &kp H         &kp COMMA     &kp DOT       &kp SEMICOLON
        // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                  &retro_mo NAV BSPC &kp SPACE         &kp LSHIFT    &mo SYM_NUM
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
      >;
    };

    querty_layer {
      bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &kp Q         &kp W         &kp E         &kp R         &kp T             &kp Y         &kp U         &kp I         &kp O         &kp P
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             HRML(A,       S,            D,            F)            &kp G             &kp H         HRMR(J,       K,            L,            SEMICOLON)
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             &kp Z         &kp X         &kp C         &kp V         &kp B             &kp N         &kp M         &kp COMMA     &kp DOT       &kp SLASH
        // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                       ___           ___               ___           ___
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
      >;
    };

    // hands_down_titanium {  //NOTE - Z and Q on separate layer or combo
    //   bindings = <
    //     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    //          &kp J         &kp G         &kp M         &kp P         &kp V             XXX           &kp DOT       XXX           XXX           &kp SQT
    //     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    //          HRML(C,       S,            N,            T)            &kp K             &kp COMMA     HRMR(A,       E,            I,            H)
    //     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    //          &kp W         &kp F         &kp L         &kp D         &kp B             XXX           &kp U         &kp O         &kp Y         &kp X
    //     // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
    //                                                    ___           ___               &retro_sticky LSHIFT R ___
    //     //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
    //   >;
    // };

    nav_layer {
      bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &kp ESC       &kp HOME      &kp UP        &kp END       &kp INS           XXX           &kp K_BACK    XXX           &kp K_FORWARD &caps_morph
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             XXX           &kp LEFT      &kp DOWN      &kp RIGHT     &kp DEL           XXX           ___           ___           ___           ___
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             &kp ENTER     &kp PG_UP     &kp TAB       &kp PG_DN     XXX               &kp PSCRN     XXX           XXX           XXX           XXX
        // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                       ___           XXX               ___           ___
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
      >;
    };

    sym_num_layer {
      bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &kp GRAVE     &kp DQT       &kp BSLH      &kp SLASH     &kp TILDE         &kp PIPE      &kp PLUS      &kp MINUS     &kp EQUAL     &kp SQT  
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             HRML(N1,      N2,           N3,           N4)           &kp N5            &kp N6        HRMR(N7,      N8,           N9,           N0)
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT         &kp CARET      &kp AMPS     &kp STAR      &kp QMARK     &kp UNDER   
        // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                       ___           ___               XXX           ___
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
      >;
    };

    function_layer {
      bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &kp C_STOP    &kp C_PREV    &kp C_PP      &kp C_NEXT    &kp C_BRI_UP      &kp F12       &kp F7        &kp F8        &kp F9        &tog BLT
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             NK(LGUI)      NK(LALT)      NK(LCTRL)     NK(LSHIFT)    &kp C_BRI_DN      &kp F11       &kp F4        &kp F5        &kp F6        XXX
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             &tog QWERTY   &kp C_VOL_DN  &kp C_MUTE    &kp C_VOL_UP  XXX               &kp F10       &kp F1        &kp F2        &kp F3        &tog GAME
        // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                       ___           XXX               XXX           ___
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
      >;
    };

    blt_layer {
      bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR        XXX           XXX           XXX           XXX           XXX
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             XXX           &bt BT_PRV    &out OUT_TOG  &bt BT_NXT    &bootloader       &bootloader   XXX           XXX           XXX           XXX
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             &tog BLT      XXX           XXX           XXX           &reset            &reset        XXX           XXX           XXX           XXX
        // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                       XXX           XXX               XXX           XXX
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
      >;
    };

    gaming_layer {
      bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &kp TAB       &kp Q         &kp W         &kp E         &kp R             XXX           XXX           XXX           XXX           XXX
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             &kp LSHIFT    &kp A         &kp S         &kp D         &kp F             XXX           XXX           XXX           XXX           XXX
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             &kp LCTRL     &kp Z         &kp X         &kp C         &kp V             XXX           XXX           XXX           XXX           &tog GAME
        // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                       &kp LALT      &kp SPACE         XXX           XXX
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
      >;
    };


    // vallak_base_layer {
    // bindings = <
    //   &td_layer CALLUM_BASE Q /**/ &kp W /**/ &kp F /**/ &kp P /**/ &kp B 						                      &kp J /**/ &kp L /**/ &kp U /**/ &kp Y /**/ &kp BSPC
    //   &kp A /**/ &kp R /**/ HRML(S, T) /**/ &kp G 			                                                    &kp M /**/ HRMR(N, E) /**/ &kp I /**/ &kp O
    //   &kp Z /**/ &kp X /**/ &kp C /**/ &kp D /**/ &kp V				                                              &kp K /**/ &kp H /**/ &td UNDER SLASH /**/ &td EXCL DOT /**/ &td MINUS COMMA
    //   &mt LC(LS(LALT)) SPACE /**/ &skq LSHIFT                                                               &sk RCTRL /**/ &to SYM
    //   >;
    // };

    // vallak_sym_layer {
    // bindings = <
    //   &kp ESC /**/ &kp AT /**/ &td LC(LG(LS(N4))) HASH /**/ &kp DLLR /**/ &kp PRCNT		                      &kp CARET /**/ &kp LESS_THAN /**/ &kp GREATER_THAN /**/ &kp SEMI /**/ &kp BSPC // TODO: add ":"
    //   &kp TAB /**/ &kp EQUAL /**/ &kp LA(RBKT) /**/ &kp LA(LS(RBKT)) /**/ &kp SQT 		                      &kp BSLH /**/ &kp LBRC /**/ &kp RBRC /**/ &kp PIPE /**/ &kp ENTER
    //   &kp TILDE /**/ &kp LA(N3) /**/ &kp LA(LBKT) /**/ &kp LA(LS(LBKT)) /**/ &kp DQT 	                      &kp LBKT /**/ &kp LPAR /**/ &kp RPAR /**/ &kp RBKT /**/ &to NAV
    //   &to BASE /**/ &skq LSHIFT                                                                             &sk RALT /**/ &to NUM
    //   >;
    // };

    // vallak_num_layer {
    // bindings = <
    //   &kp ESC /**/ &kp C_PP /**/ &kp C_PREV /**/ &kp C_NEXT /**/ &kp UNDER   			                          &kp MINUS /**/ &kp N7 /**/ &kp N8 /**/ &kp N9 /**/ &kp BSPC
    //   &kp TAB /**/ &none /**/ &kp C_VOL_DN /**/ &kp C_VOL_UP /**/ &kp PLUS 			                            &kp EQUAL /**/ &kp N4 /**/ &kp N5 /**/ &kp N6 /**/ &kp ENTER
    //   &to BLT /**/ &kp AMPS /**/ &kp SLASH /**/ &kp STAR /**/ &kp DOT			                                  &kp N0 /**/ &kp N1 /**/ &kp N2 /**/ &kp N3 /**/ &to NAV
    //   &to BASE /**/ &sk LGUI                                                                               &sk RALT /**/ &to NUM
    //   >;
		// };

    // vallak_nav_layer {
    // bindings = <
    //   &kp ESC /**/ &none /**/ &none /**/ &none /**/ &kp N5 			                                            &kp BACK /**/ &kp PREV_TAB /**/ &kp NEXT_TAB /**/ &kp FWRD /**/ &kp BSPC
    //   &kp TAB /**/ &none /**/ &none /**/ &none /**/ &kp DEL                                                 &kp LEFT /**/ &kp DOWN /**/ &kp UP /**/ &kp RIGHT /**/ &kp ENTER
    //   &td LG(GRAVE) GRAVE /**/ &none /**/ &none /**/ &none /**/ &none                                       &none /**/ &kp PG_DN /**/ &kp PG_UP /**/ &to GAME /**/ &to NAV
    //   &to BASE /**/ &sk LGUI                                                                                &sk RALT /**/ &to SYM
    //   >;
    // };



    // callum_base_layer {
    //   bindings = <
    //     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    //        &td_layer BASE Q &kp W        &kp F         &kp P         &kp B             &kp J         &kp L         &kp U         &kp Y         &kp SQT
    //     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    //          &kp A         &kp R         &kp S         &kp T         &kp G             &kp M         &kp N         &kp E         &kp I         &kp O
    //     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    //          &kp Z         &kp X         &kp C         &kp D         &kp V             &kp K         &kp H         &kp COMMA     &kp DOT       &kp SEMICOLON
    //     // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
    //                                                    &retro_mo CALLUM_NAV F &kp SPACE  &skq LSHIFT   &retro_mo CALLUM_SYM F   // REVIEW: maybe I don't need sticky SHIFT
    //     //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
    //   >;
    // };

    // callum_sym_layer {
    //   bindings = <
    //     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    //          &kp ESC       &kp LBKT      &kp LBRC      &kp LPAR      &kp TILDE         &kp CARET     &kp RPAR      &kp RBRC      &kp RBKT      &kp GRAVE
    //     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    //          &kp MINUS     &kp STAR      &kp EQUAL     &kp UNDER     &kp DOLLAR        &kp HASH      NK(LSHIFT)     NK(LCTRL)    NK(LALT)      NK(LGUI)
    //     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    //          &kp PLUS      &kp PIPE      &kp AT        &kp SLASH     &kp PERCENT       XXX           &kp BSLH      &kp AMPS      &kp QMARK     &kp EXCL
    //     // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
    //                                                    ___           ___               ___           ___
    //     //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
    //   >;
    // };

    // callum_nav_layer {
    //   bindings = <
    //     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    //          &kp ESC       XXX           XXX           XXX           XXX               &kp PG_UP     &kp HOME      &kp UP        &kp END       &kp DEL
    //     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    //          NK(LGUI)      NK(LALT)      NK(LCTRL)    NK(LSHIFT)     XXX               &kp PG_DN     &kp LEFT      &kp DOWN      &kp RIGHT     &kp BSPC
    //     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    //          XXX           XXX           XXX           XXX           XXX               &kp CAPS      XXX           &kp TAB       XXX           &kp ENTER
    //     // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
    //                                                    ___           ___               ___           ___
    //     //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
    //   >;
    // };

    // callum_num_layer {
    //   bindings = <
    //     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    //          &kp N7        &kp N5        &kp N3        &kp N1        &kp N9            &kp N8        &kp N0        &kp N2        &kp N4        &kp N6
    //     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    //          NK(LGUI)      NK(LALT)      NK(LCTRL)    NK(LSHIFT)     &kp F11           &kp F12       NK(LSHIFT)     NK(LCTRL)    NK(LALT)      NK(LGUI)
    //     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    //          &kp F7        &kp F5        &kp F3        &kp F1        &kp F9            &kp F8        &kp F10        &kp F2        &kp F4        &kp F6
    //     // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
    //                                                    ___           ___               ___           ___
    //     //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
    //   >;
    // };

	};
};

/* MINI WIKI //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// BEHAVIOURS //
  // KEYS
    &kp  [key_press <key>]         on press/release
    &kt  [key_toggle <key>]        toggle key pressed or released
    &sk  [sticky <key>]            keep key pressed until another one is pressed+released (one-shot)
    - release-after-ms               release sticky automatically (default=1s)
    - quick-release                  release sticky when another key is pressed
    - ignore-modifiers               enabled by default, sticky modifiers are merged instead of overridden

  // LAYERS //
    &to  [to_layer <layer>]        go to layer and disables all other layers except the default layer
    &tog [toggle_layer <layer>]    go to layer until it is manually disabled
    &mo  [momentary_layer <layer>] go to layer while key is pressed
    &lt  [layer_tap <layer> <key>] go to layer while key is held, or key if is tapped
    &sl  [sticky_layer <layer>]    go to layer for just one key press (one-shot)
                                    --> `quick-release` by default
                                    --> Double key problem: it does not return to first layer if it is still held down after a key press
                                    --> Solution: proc via a MACRO, since holding a macro only sends a tap
                                          alpha2macro: behavior_macro_1 {
                                            compatible = "zmk,behavior-macro";
                                            label = "MACRO1";
                                            #binding-cells = <0>;
                                            bindings = < &sl AL2 >;
                                          };

  // HOLD-TAP //
    - tapping-term-ms              time to hold before triggering hold behaviour
    - quick-tap-ms                 timer between quick-tap + hold to force hold on tap behaviour (The opposite of TAPPING_FORCE_HOLD in QMK)
    -  - global-quick-tap          applies quick-tap-ms even if quick-tap is not the same key, useful for avoiding delays when fast typing on homerow mods
    - retro-tap                    hold behaviour is applied immediately if pressing another key when pressing the first one?
    - hold-trigger-key-positions   keys in this list instantly apply the hold modifier if they are the first ones pressed after the key with hold-tap behaviour
    - flavor
      "hold-preferred"   &ht_hp   interrupt-based: trigger hold when tapping-term-ms has expired OR another key is pressed down
      "balanced"         &ht_bl   interrupt-based: trigger hold when tapping-term-ms has expired OR another key is pressed AND released (AKA permissive, prone to many false positives)
      "tap-unless-interrupted"    interrupt-based: trigger hold ONLY when another key is pressed before tapping-term-ms has expired
      "tap-preferred"    &ht_tp   trigger hold ONLY when tapping-term-ms has expired

    &mt  "mod-tap" is simply a hold-tap with flavor="hold-preferred" and tapping-term-ms=<200>, it can be used on any key, not just modifiers

  // MOD-MORPH // can customize mod behaviour for any key (eg. Ctrl+q=ESC)
    bspc_del: backspace_delete {
      compatible = "zmk,behavior-mod-morph";
      label = "BACKSPACE_DELETE";
      #binding-cells = <0>;                        <-- ?
      bindings = <&kp BACKSPACE>, <&kp DELETE>;    <-- <1> is original key, <2> is result
      mods = <(MOD_LSFT|MOD_RSFT)>;                <-- list of mods triggering the behaviour
      keep-mods = <(MOD_RSFT)>;                    <-- list of mods applied to the result
    };

  // OTHER //
    MACRO          sequence of behaviours
    TAP-DANCE      different outputs by number of times a key is pressed, can be combined with HOLD-TAP
    &caps_word     enable caps for a single word, can be customized
    &key_repeat    repeat last key
    &reset         only affects the half on which the command is invoked (slave still needs to be connected to master though)
    &bootloader    only affects the half on which the command is invoked (slave still needs to be connected to master though)

*/